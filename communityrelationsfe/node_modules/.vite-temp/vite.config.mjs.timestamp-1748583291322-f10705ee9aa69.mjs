// vite.config.mjs
import path from "path";
import { defineConfig } from "file:///C:/Users/CCTV%20Operator/Desktop/Adrian/communityRelationship/testcomrel/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/CCTV%20Operator/Desktop/Adrian/communityRelationship/testcomrel/node_modules/@vitejs/plugin-react/dist/index.mjs";
import jsconfigPaths from "file:///C:/Users/CCTV%20Operator/Desktop/Adrian/communityRelationship/testcomrel/node_modules/vite-jsconfig-paths/dist/index.mjs";
import { webcrypto } from "crypto";
if (!globalThis.crypto) {
  globalThis.crypto = webcrypto;
}
var { createServer } = await import("file:///C:/Users/CCTV%20Operator/Desktop/Adrian/communityRelationship/testcomrel/node_modules/vite/dist/node/index.js");
var server = await createServer();
await server.listen();
var vite_config_default = defineConfig({
  plugins: [react(), jsconfigPaths()],
  // https://github.com/jpuri/react-draft-wysiwyg/issues/1317
  base: "/comrel",
  // accessing env variable is not possible here. So hard coding this.
  define: {
    global: "window"
  },
  resolve: {
    alias: [
      {
        find: /^~(.+)/,
        replacement: path.join(process.cwd(), "node_modules/$1")
      },
      {
        find: /^src(.+)/,
        replacement: path.join(process.cwd(), "src/$1")
      }
    ]
  },
  server: {
    // this ensures that the browser opens upon server start
    open: true,
    // this sets a default port to 3000
    port: 3004,
    host: true
  },
  preview: {
    // this ensures that the browser opens upon preview start
    open: true,
    // this sets a default port to 3000
    port: 3004,
    host: true
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubWpzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXFVzZXJzXFxDQ1RWIE9wZXJhdG9yXFxEZXNrdG9wXFxBZHJpYW5cXGNvbW11bml0eVJlbGF0aW9uc2hpcFxcdGVzdGNvbXJlbFxcIiwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxDQ1RWIE9wZXJhdG9yXFxcXERlc2t0b3BcXFxcQWRyaWFuXFxcXGNvbW11bml0eVJlbGF0aW9uc2hpcFxcXFx0ZXN0Y29tcmVsXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxDQ1RWIE9wZXJhdG9yXFxcXERlc2t0b3BcXFxcQWRyaWFuXFxcXGNvbW11bml0eVJlbGF0aW9uc2hpcFxcXFx0ZXN0Y29tcmVsXFxcXHZpdGUuY29uZmlnLm1qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvQ0NUViUyME9wZXJhdG9yL0Rlc2t0b3AvQWRyaWFuL2NvbW11bml0eVJlbGF0aW9uc2hpcC90ZXN0Y29tcmVsL3ZpdGUuY29uZmlnLm1qc1wiOy8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS9kaXNjdXNzaW9ucy8zNDQ4XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0JztcbmltcG9ydCBqc2NvbmZpZ1BhdGhzIGZyb20gJ3ZpdGUtanNjb25maWctcGF0aHMnO1xuaW1wb3J0IHsgd2ViY3J5cHRvIH0gZnJvbSAnY3J5cHRvJztcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4vLyBQYXRjaCB0aGUgZ2xvYmFsVGhpcy5jcnlwdG8gQkVGT1JFIFZpdGUgaXMgbG9hZGVkXG5pZiAoIWdsb2JhbFRoaXMuY3J5cHRvKSB7XG4gIGdsb2JhbFRoaXMuY3J5cHRvID0gd2ViY3J5cHRvO1xufVxuXG4vLyBEeW5hbWljYWxseSBpbXBvcnQgVml0ZSdzIGRldiBjb21tYW5kIEFGVEVSIHBhdGNoaW5nXG5jb25zdCB7IGNyZWF0ZVNlcnZlciB9ID0gYXdhaXQgaW1wb3J0KCd2aXRlJyk7XG5cbmNvbnN0IHNlcnZlciA9IGF3YWl0IGNyZWF0ZVNlcnZlcigpO1xuYXdhaXQgc2VydmVyLmxpc3RlbigpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgcGx1Z2luczogW3JlYWN0KCksIGpzY29uZmlnUGF0aHMoKV0sXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcHVyaS9yZWFjdC1kcmFmdC13eXNpd3lnL2lzc3Vlcy8xMzE3XG4gIGJhc2U6ICcvY29tcmVsJywgLy8gYWNjZXNzaW5nIGVudiB2YXJpYWJsZSBpcyBub3QgcG9zc2libGUgaGVyZS4gU28gaGFyZCBjb2RpbmcgdGhpcy5cbiAgZGVmaW5lOiB7XG4gICAgZ2xvYmFsOiAnd2luZG93J1xuICB9LFxuICByZXNvbHZlOiB7XG4gICAgYWxpYXM6IFtcbiAgICAgIHtcbiAgICAgICAgZmluZDogL15+KC4rKS8sXG4gICAgICAgIHJlcGxhY2VtZW50OiBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ25vZGVfbW9kdWxlcy8kMScpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmaW5kOiAvXnNyYyguKykvLFxuICAgICAgICByZXBsYWNlbWVudDogcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdzcmMvJDEnKVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgLy8gdGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJyb3dzZXIgb3BlbnMgdXBvbiBzZXJ2ZXIgc3RhcnRcbiAgICBvcGVuOiB0cnVlLFxuICAgIC8vIHRoaXMgc2V0cyBhIGRlZmF1bHQgcG9ydCB0byAzMDAwXG4gICAgcG9ydDogMzAwNCxcbiAgICBob3N0OiB0cnVlXG4gIH0sXG4gIHByZXZpZXc6IHtcbiAgICAvLyB0aGlzIGVuc3VyZXMgdGhhdCB0aGUgYnJvd3NlciBvcGVucyB1cG9uIHByZXZpZXcgc3RhcnRcbiAgICBvcGVuOiB0cnVlLFxuICAgIC8vIHRoaXMgc2V0cyBhIGRlZmF1bHQgcG9ydCB0byAzMDAwXG4gICAgcG9ydDogMzAwNCxcbiAgICBob3N0OiB0cnVlXG4gIH1cbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLE9BQU8sVUFBVTtBQUNqQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFdBQVc7QUFDbEIsT0FBTyxtQkFBbUI7QUFDMUIsU0FBUyxpQkFBaUI7QUFLMUIsSUFBSSxDQUFDLFdBQVcsUUFBUTtBQUN0QixhQUFXLFNBQVM7QUFDdEI7QUFHQSxJQUFNLEVBQUUsYUFBYSxJQUFJLE1BQU0sT0FBTyx1SEFBTTtBQUU1QyxJQUFNLFNBQVMsTUFBTSxhQUFhO0FBQ2xDLE1BQU0sT0FBTyxPQUFPO0FBSXBCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDO0FBQUE7QUFBQSxFQUVsQyxNQUFNO0FBQUE7QUFBQSxFQUNOLFFBQVE7QUFBQSxJQUNOLFFBQVE7QUFBQSxFQUNWO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsTUFDTDtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sYUFBYSxLQUFLLEtBQUssUUFBUSxJQUFJLEdBQUcsaUJBQWlCO0FBQUEsTUFDekQ7QUFBQSxNQUNBO0FBQUEsUUFDRSxNQUFNO0FBQUEsUUFDTixhQUFhLEtBQUssS0FBSyxRQUFRLElBQUksR0FBRyxRQUFRO0FBQUEsTUFDaEQ7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBQ0EsUUFBUTtBQUFBO0FBQUEsSUFFTixNQUFNO0FBQUE7QUFBQSxJQUVOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxFQUNSO0FBQUEsRUFDQSxTQUFTO0FBQUE7QUFBQSxJQUVQLE1BQU07QUFBQTtBQUFBLElBRU4sTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
